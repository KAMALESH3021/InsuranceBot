{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamal\\\\OneDrive\\\\Desktop\\\\CHAT BOT\\\\insurance-bot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const sessionId = \"session1\"; // Static session ID for now\n  const [isListening, setIsListening] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n\n  // Handle sending the question to the chatbot API\n  const handleSend = async () => {\n    if (question.trim()) {\n      try {\n        // Send question along with session_id to FastAPI backend\n        const res = await axios.post(\"http://localhost:8000/ask\", {\n          question: question,\n          session_id: sessionId // Include session_id here\n        });\n        const botResponse = res.data.response;\n\n        // Update conversation history with bot response\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, {\n            question,\n            botResponse\n          }];\n          return newConversation;\n        });\n        setQuestion(''); // Clear input field after sending\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US'; // Set the language\n    utterance.rate = 1; // Adjust the speaking rate (1 is normal)\n    utterance.pitch = 1; // Adjust the pitch (1 is normal)\n\n    // Play the audio\n    speechSynthesis.speak(utterance);\n  };\n\n  // Function to start recording audio\n  const startRecording = () => {\n    setIsRecording(true);\n    setAudioChunks([]);\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        setAudioChunks(prevChunks => [...prevChunks, event.data]);\n      };\n      mediaRecorderRef.current.start();\n    }).catch(error => {\n      console.error('Error accessing microphone:', error);\n    });\n  };\n\n  // Function to stop recording audio and send it to Gnani ASR\n  const stopRecording = async () => {\n    setIsRecording(false);\n    mediaRecorderRef.current.stop();\n\n    // Example: mock transcript data for testing purposes\n    const mockTranscript = \"H\";\n\n    // Use mock data if you want to skip the real API call for now\n    if (process.env.NODE_ENV === 'development') {\n      console.log(\"Using mock data for testing...\");\n      setQuestion(mockTranscript); // Set mock transcript as the question\n      handleSend(); // Automatically send the question\n    } else {\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        const formData = new FormData();\n        formData.append('file', audioBlob, 'recording.mp3');\n        try {\n          const res = await axios.post('https://asr.gnani.ai/asr/api/upload', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `d982d7e4cd227b438cc1176c42acb2238899696e48e470d257d4f00238d84a71` // Replace with your API key\n            }\n          });\n          const transcript = res.data.transcript;\n          // Assuming the response contains a transcript field\n          setQuestion(transcript); // Set the recognized speech as the question\n          handleSend(); // Automatically send the question\n        } catch (error) {\n          console.error('Error uploading audio or fetching transcript:', error);\n        }\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CHATBOT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 18\n            }, this), \" \", msg.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Bot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 18\n            }, this), \" \", msg.botResponse]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"audio-btn\",\n            onClick: () => handlePlayAudio(msg.botResponse),\n            children: \"\\uD83D\\uDD0A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Ask me something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn1\",\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'ðŸŽ¤ Record Question'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"V3cQFK3jZ+sP3XKNBDgok7pM4uE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","App","_s","question","setQuestion","conversation","setConversation","sessionId","isListening","setIsListening","isRecording","setIsRecording","mediaRecorderRef","audioChunks","setAudioChunks","handleSend","trim","res","post","session_id","botResponse","data","response","prevConversation","newConversation","error","console","handlePlayAudio","text","utterance","SpeechSynthesisUtterance","lang","rate","pitch","speechSynthesis","speak","startRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","current","MediaRecorder","ondataavailable","event","prevChunks","start","catch","stopRecording","stop","mockTranscript","process","env","NODE_ENV","log","onstop","audioBlob","Blob","type","formData","FormData","append","headers","transcript","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onClick","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/kamal/OneDrive/Desktop/CHAT BOT/insurance-bot/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport \"./App.css\";\n\nfunction App() {\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const sessionId = \"session1\";  // Static session ID for now\n  const [isListening, setIsListening] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n\n  // Handle sending the question to the chatbot API\n  const handleSend = async () => {\n    if (question.trim()) {\n      try {\n        // Send question along with session_id to FastAPI backend\n        const res = await axios.post(\"http://localhost:8000/ask\", { \n          question: question, \n          session_id: sessionId // Include session_id here\n        });\n\n        const botResponse = res.data.response;\n\n        // Update conversation history with bot response\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, { question, botResponse }];\n          return newConversation;\n        });\n\n        setQuestion(''); // Clear input field after sending\n\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US';  // Set the language\n    utterance.rate = 1;        // Adjust the speaking rate (1 is normal)\n    utterance.pitch = 1;       // Adjust the pitch (1 is normal)\n\n    // Play the audio\n    speechSynthesis.speak(utterance);\n  };\n\n  // Function to start recording audio\n  const startRecording = () => {\n    setIsRecording(true);\n    setAudioChunks([]);\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        setAudioChunks(prevChunks => [...prevChunks, event.data]);\n      };\n      mediaRecorderRef.current.start();\n    }).catch(error => {\n      console.error('Error accessing microphone:', error);\n    });\n  };\n\n// Function to stop recording audio and send it to Gnani ASR\nconst stopRecording = async () => {\n  setIsRecording(false);\n  mediaRecorderRef.current.stop();\n\n  // Example: mock transcript data for testing purposes\n  const mockTranscript = \"H\";\n\n  // Use mock data if you want to skip the real API call for now\n  if (process.env.NODE_ENV === 'development') {\n    console.log(\"Using mock data for testing...\");\n    setQuestion(mockTranscript);  // Set mock transcript as the question\n    handleSend();  // Automatically send the question\n  } else {\n    mediaRecorderRef.current.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'recording.mp3');\n\n      try {\n        const res = await axios.post('https://asr.gnani.ai/asr/api/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `d982d7e4cd227b438cc1176c42acb2238899696e48e470d257d4f00238d84a71`, // Replace with your API key\n          }\n        });\n\n        const transcript = res.data.transcript;\n        // Assuming the response contains a transcript field\n        setQuestion(transcript);  // Set the recognized speech as the question\n        handleSend();  // Automatically send the question\n\n      } catch (error) {\n        console.error('Error uploading audio or fetching transcript:', error);\n      }\n    };\n  }\n};\n\n\n  return (\n    <div className=\"App\">\n      <h1>CHATBOT</h1>\n      <div className=\"chat-box\">\n        {conversation.map((msg, index) => (\n          <div key={index} className=\"message-container\">\n            <div className=\"user-message\">\n              <p><strong>User:</strong> {msg.question}</p>\n            </div>\n            <div className=\"bot-message\">\n              <p><strong>Bot:</strong> {msg.botResponse}</p>\n              {/* Play audio button for each bot response */}\n              <button className=\"audio-btn\" onClick={() => handlePlayAudio(msg.botResponse)}>\n                ðŸ”Š \n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <input\n        type=\"text\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        placeholder=\"Ask me something...\"\n      />\n      <button className=\"btn\" onClick={handleSend}>Send</button>\n      {/* Button to start/stop speech recognition */}\n      <button className=\"btn1\" onClick={isRecording ? stopRecording : startRecording}>\n        {isRecording ? 'Stop Recording' : 'ðŸŽ¤ Record Question'}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}