{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamal\\\\OneDrive\\\\Desktop\\\\CHAT BOT\\\\insurance-bot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Markdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const sessionId = \"session1\"; // Static session ID for now\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n\n  // Start recording when user clicks a button\n  const startRecording = () => {\n    if (recognition) {\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setQuestion(transcript); // Set the recognized speech as the question\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n        handleSend(); // Automatically send the question after recording ends\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n      recognition.start(); // Start recording when button is clicked\n    } else {\n      alert(\"Speech recognition not supported in this browser.\");\n    }\n  };\n\n  // Function to send the question to the bot\n  const handleSend = async () => {\n    if (question.trim()) {\n      setLoading(true);\n      try {\n        const res = await axios.post(\"http://localhost:8000/ask\", {\n          question: question,\n          session_id: sessionId\n        });\n        const botResponse = res.data.response;\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, {\n            question,\n            botResponse\n          }];\n          return newConversation;\n        });\n        handlePlayAudio(botResponse); // Play the bot's response\n\n        setQuestion(''); // Clear input field\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    speechSynthesis.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CHATBOT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 18\n            }, this), \" \", msg.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Bot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(Markdown, {\n              remarkPlugins: [[remarkGfm, {\n                singleTilde: true\n              }]],\n              children: msg.botResponse\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wait a second dude...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Ask me something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleSend,\n      children: \"Send \\uD83D\\uDE04\\uD83D\\uDC7E\\u26A1\\u2650\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startRecording,\n      disabled: isListening,\n      children: isListening ? 'Listening...' : '🎤 Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isListening ? 'Listening...' : 'Click to speak'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"S5ZQzAYm7kxrwMvdWNnPSuUMC2g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Markdown","remarkGfm","jsxDEV","_jsxDEV","App","_s","question","setQuestion","conversation","setConversation","isListening","setIsListening","loading","setLoading","sessionId","SpeechRecognition","window","webkitSpeechRecognition","recognition","startRecording","interimResults","lang","onstart","onresult","event","transcript","results","onend","handleSend","onerror","console","error","start","alert","trim","res","post","session_id","botResponse","data","response","prevConversation","newConversation","handlePlayAudio","text","utterance","SpeechSynthesisUtterance","rate","pitch","speechSynthesis","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","remarkPlugins","singleTilde","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kamal/OneDrive/Desktop/CHAT BOT/insurance-bot/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Markdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport \"./App.css\";\n\nfunction App() {\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const [loading, setLoading] = useState(false); \n\n  const sessionId = \"session1\";  // Static session ID for now\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n\n  // Start recording when user clicks a button\n  const startRecording = () => {\n    if (recognition) {\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setQuestion(transcript);  // Set the recognized speech as the question\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n        handleSend(); // Automatically send the question after recording ends\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognition.start();  // Start recording when button is clicked\n    } else {\n      alert(\"Speech recognition not supported in this browser.\");\n    }\n  };\n\n  // Function to send the question to the bot\n  const handleSend = async () => {\n    if (question.trim()) {\n      setLoading(true)\n      try {\n        const res = await axios.post(\"http://localhost:8000/ask\", { \n          question: question, \n          session_id: sessionId\n        });\n\n        const botResponse = res.data.response;\n\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, { question, botResponse }];\n          return newConversation;\n        });\n\n        handlePlayAudio(botResponse);  // Play the bot's response\n\n        setQuestion('');  // Clear input field\n\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      } finally {\n        setLoading(false)\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    speechSynthesis.speak(utterance);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>CHATBOT</h1>\n      <div className=\"chat-box\">\n        {conversation.map((msg, index) => (\n          <div key={index} className=\"message-container\">\n            <div className=\"user-message\">\n              <p><strong>User:</strong> {msg.question}</p>\n            </div>\n            <div className=\"bot-message\">\n              <p><strong>Bot:</strong><Markdown remarkPlugins={[[remarkGfm, {singleTilde: true}]]}>\n                {msg.botResponse}\n              </Markdown>\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div>\n        {loading && <p>Wait a second dude...</p>}\n      </div>\n      <input\n        type=\"text\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        placeholder=\"Ask me something...\"\n      />\n      <button className=\"btn\" onClick={handleSend}>Send 😄👾⚡♐</button>\n\n      {/* Start recording when user clicks this button */}\n      <button className=\"btn\" onClick={startRecording} disabled={isListening}>\n        {isListening ? 'Listening...' : '🎤 Start Recording'}\n      </button>\n      <p>{isListening ? 'Listening...' : 'Click to speak'}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}