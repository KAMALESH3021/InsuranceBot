{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamal\\\\OneDrive\\\\Desktop\\\\CHAT BOT\\\\insurance-bot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const sessionId = \"session1\"; // Static session ID for now\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n\n  // Start recording when user clicks a button\n  const startRecording = () => {\n    if (recognition) {\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setQuestion(transcript); // Set the recognized speech as the question\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n        handleSend(); // Automatically send the question after recording ends\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n      recognition.start(); // Start recording when button is clicked\n    } else {\n      alert(\"Speech recognition not supported in this browser.\");\n    }\n  };\n\n  // Function to send the question to the bot\n  const handleSend = async () => {\n    if (question.trim()) {\n      try {\n        const res = await axios.post(\"http://localhost:8000/ask\", {\n          question: question,\n          session_id: sessionId\n        });\n        const botResponse = res.data.response;\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, {\n            question,\n            botResponse\n          }];\n          return newConversation;\n        });\n        handlePlayAudio(botResponse); // Play the bot's response\n\n        setQuestion(''); // Clear input field\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    speechSynthesis.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CHATBOT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 18\n            }, this), \" \", msg.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Bot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Markdown, {\n              remarkPlugins: [[remarkGfm, {\n                singleTilde: false\n              }]],\n              children: msg.botResponse\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Ask me something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startRecording,\n      disabled: isListening,\n      children: isListening ? 'Listening...' : 'ðŸŽ¤ Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isListening ? 'Listening...' : 'Click to speak'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Vxds7kgjd5VkTdpgkkYHvDxCpmI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","ReactMarkdown","jsxDEV","_jsxDEV","App","_s","question","setQuestion","conversation","setConversation","isListening","setIsListening","sessionId","SpeechRecognition","window","webkitSpeechRecognition","recognition","startRecording","interimResults","lang","onstart","onresult","event","transcript","results","onend","handleSend","onerror","console","error","start","alert","trim","res","post","session_id","botResponse","data","response","prevConversation","newConversation","handlePlayAudio","text","utterance","SpeechSynthesisUtterance","rate","pitch","speechSynthesis","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","Markdown","remarkPlugins","remarkGfm","singleTilde","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kamal/OneDrive/Desktop/CHAT BOT/insurance-bot/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport \"./App.css\";\n\nfunction App() {\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n\n  const sessionId = \"session1\";  // Static session ID for now\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n\n  // Start recording when user clicks a button\n  const startRecording = () => {\n    if (recognition) {\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setQuestion(transcript);  // Set the recognized speech as the question\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n        handleSend(); // Automatically send the question after recording ends\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognition.start();  // Start recording when button is clicked\n    } else {\n      alert(\"Speech recognition not supported in this browser.\");\n    }\n  };\n\n  // Function to send the question to the bot\n  const handleSend = async () => {\n    if (question.trim()) {\n      try {\n        const res = await axios.post(\"http://localhost:8000/ask\", { \n          question: question, \n          session_id: sessionId\n        });\n\n        const botResponse = res.data.response;\n\n        setConversation(prevConversation => {\n          const newConversation = [...prevConversation, { question, botResponse }];\n          return newConversation;\n        });\n\n        handlePlayAudio(botResponse);  // Play the bot's response\n\n        setQuestion('');  // Clear input field\n\n      } catch (error) {\n        console.error('Error fetching response:', error);\n      }\n    }\n  };\n\n  // Function to handle browser TTS for each bot response\n  const handlePlayAudio = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'en-US';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    speechSynthesis.speak(utterance);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>CHATBOT</h1>\n      <div className=\"chat-box\">\n        {conversation.map((msg, index) => (\n          <div key={index} className=\"message-container\">\n            <div className=\"user-message\">\n              <p><strong>User:</strong> {msg.question}</p>\n            </div>\n            <div className=\"bot-message\">\n            <p><strong>Bot:</strong> \n              <Markdown remarkPlugins={[[remarkGfm, {singleTilde: false}]]}>\n              {msg.botResponse}\n            </Markdown></p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <input\n        type=\"text\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        placeholder=\"Ask me something...\"\n      />\n      <button className=\"btn\" onClick={handleSend}>Send</button>\n\n      {/* Start recording when user clicks this button */}\n      <button className=\"btn\" onClick={startRecording} disabled={isListening}>\n        {isListening ? 'Listening...' : 'ðŸŽ¤ Start Recording'}\n      </button>\n      <p>{isListening ? 'Listening...' : 'Click to speak'}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMa,SAAS,GAAG,UAAU,CAAC,CAAE;EAC/B,MAAMC,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;EACpF,MAAMC,WAAW,GAAGH,iBAAiB,GAAG,IAAIA,iBAAiB,CAAC,CAAC,GAAG,IAAI;;EAEtE;EACA,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAID,WAAW,EAAE;MACfA,WAAW,CAACE,cAAc,GAAG,KAAK;MAClCF,WAAW,CAACG,IAAI,GAAG,OAAO;MAE1BH,WAAW,CAACI,OAAO,GAAG,MAAM;QAC1BT,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC;MAEDK,WAAW,CAACK,QAAQ,GAAIC,KAAK,IAAK;QAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;QACjDhB,WAAW,CAACgB,UAAU,CAAC,CAAC,CAAE;MAC5B,CAAC;MAEDP,WAAW,CAACS,KAAK,GAAG,MAAM;QACxBd,cAAc,CAAC,KAAK,CAAC;QACrBe,UAAU,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC;MAEDV,WAAW,CAACW,OAAO,GAAIL,KAAK,IAAK;QAC/BM,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEP,KAAK,CAACO,KAAK,CAAC;QACvDlB,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;MAEDK,WAAW,CAACc,KAAK,CAAC,CAAC,CAAC,CAAE;IACxB,CAAC,MAAM;MACLC,KAAK,CAAC,mDAAmD,CAAC;IAC5D;EACF,CAAC;;EAED;EACA,MAAML,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIpB,QAAQ,CAAC0B,IAAI,CAAC,CAAC,EAAE;MACnB,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,2BAA2B,EAAE;UACxD5B,QAAQ,EAAEA,QAAQ;UAClB6B,UAAU,EAAEvB;QACd,CAAC,CAAC;QAEF,MAAMwB,WAAW,GAAGH,GAAG,CAACI,IAAI,CAACC,QAAQ;QAErC7B,eAAe,CAAC8B,gBAAgB,IAAI;UAClC,MAAMC,eAAe,GAAG,CAAC,GAAGD,gBAAgB,EAAE;YAAEjC,QAAQ;YAAE8B;UAAY,CAAC,CAAC;UACxE,OAAOI,eAAe;QACxB,CAAC,CAAC;QAEFC,eAAe,CAACL,WAAW,CAAC,CAAC,CAAE;;QAE/B7B,WAAW,CAAC,EAAE,CAAC,CAAC,CAAE;MAEpB,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC;;EAED;EACA,MAAMY,eAAe,GAAIC,IAAI,IAAK;IAChC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;IACpDC,SAAS,CAACxB,IAAI,GAAG,OAAO;IACxBwB,SAAS,CAACE,IAAI,GAAG,CAAC;IAClBF,SAAS,CAACG,KAAK,GAAG,CAAC;IACnBC,eAAe,CAACC,KAAK,CAACL,SAAS,CAAC;EAClC,CAAC;EAED,oBACExC,OAAA;IAAK8C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/C,OAAA;MAAA+C,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBnD,OAAA;MAAK8C,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtB1C,YAAY,CAAC+C,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAC3BtD,OAAA;QAAiB8C,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAC5C/C,OAAA;UAAK8C,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC3B/C,OAAA;YAAA+C,QAAA,gBAAG/C,OAAA;cAAA+C,QAAA,EAAQ;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACE,GAAG,CAAClD,QAAQ;UAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC,eACNnD,OAAA;UAAK8C,SAAS,EAAC,aAAa;UAAAC,QAAA,eAC5B/C,OAAA;YAAA+C,QAAA,gBAAG/C,OAAA;cAAA+C,QAAA,EAAQ;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtBnD,OAAA,CAACuD,QAAQ;cAACC,aAAa,EAAE,CAAC,CAACC,SAAS,EAAE;gBAACC,WAAW,EAAE;cAAK,CAAC,CAAC,CAAE;cAAAX,QAAA,EAC5DM,GAAG,CAACpB;YAAW;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC;MAAA,GATEG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnD,OAAA;MACE2D,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEzD,QAAS;MAChB0D,QAAQ,EAAGC,CAAC,IAAK1D,WAAW,CAAC0D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,WAAW,EAAC;IAAqB;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFnD,OAAA;MAAQ8C,SAAS,EAAC,KAAK;MAACmB,OAAO,EAAE1C,UAAW;MAAAwB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG1DnD,OAAA;MAAQ8C,SAAS,EAAC,KAAK;MAACmB,OAAO,EAAEnD,cAAe;MAACoD,QAAQ,EAAE3D,WAAY;MAAAwC,QAAA,EACpExC,WAAW,GAAG,cAAc,GAAG;IAAoB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACTnD,OAAA;MAAA+C,QAAA,EAAIxC,WAAW,GAAG,cAAc,GAAG;IAAgB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV;AAACjD,EAAA,CA7GQD,GAAG;AAAAkE,EAAA,GAAHlE,GAAG;AA+GZ,eAAeA,GAAG;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}